name: Build & Publish (uv)

on:
  push:
    branches: [main]

permissions:
  contents: read       # checkout
  id-token:  write     # required for PyPI trusted publishing

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Fast binary install of uv
      - uses: astral-sh/setup-uv@v6
        with:
          version: latest

      # GitHub's cached CPython is usually quicker than uv downloading
      - uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml   # uses your requires-python

      - name: Install dev deps
        run: uv sync --locked --extra test --dev

      - name: Run tests
        run: uv run pytest -q

  # -------------------------
  # Determine if version changed
  # -------------------------
  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.set-output.outputs.changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract local version from pyproject.toml
        id: local
        shell: bash
        run: |
          local_version=$(grep -Po '^version\s*=\s*"\K[^"]+' pyproject.toml)
          echo "local_version=$local_version" >> "$GITHUB_OUTPUT"

      - name: Fetch published version from PyPI
        id: remote
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          remote_version=$(curl -s https://pypi.org/pypi/easy-audio-interfaces/json | jq -r '.info.version')
          echo "remote_version=$remote_version" >> "$GITHUB_OUTPUT"

      - name: Determine if version changed
        id: set-output
        shell: bash
        run: |
          if [ "${{ steps.local.outputs.local_version }}" != "${{ steps.remote.outputs.remote_version }}" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

  # -------------------------
  # Publish to PyPI only when version changed
  # -------------------------
  publish:
    needs: [test, check-version]
    if: needs.check-version.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Build sdists & wheels
        # --no-sources = verify nothing is fetched at build time
        run: uv build --sdist --wheel --no-sources

      - name: Publish to PyPI
        # With Trusted Publishing no token is required
        run: uv publish --check-url https://pypi.org/project/easy-audio-interfaces/
